// Code generated by "gobinenc static.go"; DO NOT EDIT.

package main

import (
	"io"
)

func (s *Static) WriteTo(w io.Writer) (n int, err error) {
	size := 34
	buf := make([]byte, size)
	offset := 0
	buf[offset] = byte(s.Uint8)
	offset += 1
	buf[offset] = byte(s.Uint16)
	buf[offset+1] = byte(s.Uint16 >> 8)
	offset += 2
	buf[offset] = byte(s.Uint32)
	buf[offset+1] = byte(s.Uint32 >> 8)
	buf[offset+2] = byte(s.Uint32 >> 16)
	buf[offset+3] = byte(s.Uint32 >> 24)
	offset += 4
	buf[offset] = byte(s.Uint64)
	buf[offset+1] = byte(s.Uint64 >> 8)
	buf[offset+2] = byte(s.Uint64 >> 16)
	buf[offset+3] = byte(s.Uint64 >> 24)
	buf[offset+4] = byte(s.Uint64 >> 32)
	buf[offset+5] = byte(s.Uint64 >> 40)
	buf[offset+6] = byte(s.Uint64 >> 48)
	buf[offset+7] = byte(s.Uint64 >> 56)
	offset += 8
	buf[offset] = byte(uint8(s.Int8))
	offset += 1
	buf[offset] = byte(uint16(s.Int16))
	buf[offset+1] = byte(uint16(s.Int16) >> 8)
	offset += 2
	buf[offset] = byte(uint32(s.Int32))
	buf[offset+1] = byte(uint32(s.Int32) >> 8)
	buf[offset+2] = byte(uint32(s.Int32) >> 16)
	buf[offset+3] = byte(uint32(s.Int32) >> 24)
	offset += 4
	buf[offset] = byte(uint64(s.Int64))
	buf[offset+1] = byte(uint64(s.Int64) >> 8)
	buf[offset+2] = byte(uint64(s.Int64) >> 16)
	buf[offset+3] = byte(uint64(s.Int64) >> 24)
	buf[offset+4] = byte(uint64(s.Int64) >> 32)
	buf[offset+5] = byte(uint64(s.Int64) >> 40)
	buf[offset+6] = byte(uint64(s.Int64) >> 48)
	buf[offset+7] = byte(uint64(s.Int64) >> 56)
	offset += 8
	for i1 := 0; i1 < 4; i1++ {
		buf[offset] = byte(s.Arr[i1])
		offset += 1
	}
	return w.Write(buf)
}

func (s *Static) ReadFrom(r io.Reader) error {
	buf := make([]byte, 8)
	r.Read(buf[:1])
	s.Uint8 = uint8(buf[0])
	r.Read(buf[:2])
	s.Uint16 = uint16(buf[0]) | (uint16(buf[1]) << 8)
	r.Read(buf[:4])
	s.Uint32 = uint32(buf[0]) | (uint32(buf[1]) << 8) | (uint32(buf[2]) << 16) | (uint32(buf[3]) << 24)
	r.Read(buf[:8])
	s.Uint64 = uint64(buf[0]) | (uint64(buf[1]) << 8) | (uint64(buf[2]) << 16) | (uint64(buf[3]) << 24) | (uint64(buf[4]) << 32) | (uint64(buf[5]) << 40) | (uint64(buf[6]) << 48) | (uint64(buf[7]) << 56)
	r.Read(buf[:1])
	s.Int8 = int8(uint8(buf[0]))
	r.Read(buf[:2])
	s.Int16 = int16(uint16(buf[0]) | (uint16(buf[1]) << 8))
	r.Read(buf[:4])
	s.Int32 = int32(uint32(buf[0]) | (uint32(buf[1]) << 8) | (uint32(buf[2]) << 16) | (uint32(buf[3]) << 24))
	r.Read(buf[:8])
	s.Int64 = int64(uint64(buf[0]) | (uint64(buf[1]) << 8) | (uint64(buf[2]) << 16) | (uint64(buf[3]) << 24) | (uint64(buf[4]) << 32) | (uint64(buf[5]) << 40) | (uint64(buf[6]) << 48) | (uint64(buf[7]) << 56))
	for i := 0; i < 4; i++ {
		r.Read(buf[:1])
		s.Arr[i] = uint8(buf[0])
	}
	return nil
}
