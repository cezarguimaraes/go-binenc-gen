package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"go/types"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/cezarguimaraes/go-binenc-gen/encoder"
	"golang.org/x/tools/go/packages"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("binenc: ")

	flag.Parse()
	tags := []string{}
	args := flag.Args()
	if len(args) == 0 {
		args = []string{"."}
	}

	var dir string
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
	}

	g := &Generator{}
	g.parsePackage(args, tags)

	g.Printf("// Code generated by \"gobinenc %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")

	g.Printf("import (\n")
	g.Printf("\t\"io\"\n")
	g.Printf(")")
	g.Printf("\n")

	g.generate()

	src := g.format()
	baseName := fmt.Sprintf("%s_encoding.go", g.pkg.name)
	outputName := filepath.Join(dir, strings.ToLower(baseName))
	err := os.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

type Struct struct {
	name   string
	fields []string
	types  []types.Type
}

type File struct {
	pkg  *Package
	file *ast.File
	// typeName string
	// values   []Value
	structs []*Struct
}

type Package struct {
	name     string
	typeInfo *types.Info
	files    []*File
}

type Generator struct {
	buf bytes.Buffer
	pkg *Package
}

func (g *Generator) parsePackage(patterns, tags []string) {
	cfg := &packages.Config{
		Mode:       packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedSyntax,
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}

	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}

	g.addPackage(pkgs[0])
}

func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &Package{
		name:     pkg.Name,
		typeInfo: pkg.TypesInfo,
		files:    make([]*File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file: file,
			pkg:  g.pkg,
		}
	}
}

func (g *Generator) generate() {
	for _, file := range g.pkg.files {
		log.Printf("generating file %s\n", file.file.Name)
		if file.file != nil {
			ast.Inspect(file.file, file.inspectNode)
		}
	}

	for _, file := range g.pkg.files {
		for _, s := range file.structs {
			g.generateWrite(s)
			// TODO: generateRead
			// g.generateRead(s)
		}
	}
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) generateWrite(s *Struct) {
	g.Printf("func (s *%s) Write(w io.Writer) (n int, err error) {\n", s.name)
	e := encoder.NewWriter()
	e.Printf("\toffset := 0\n")
	for i, name := range s.fields {
		selector := fmt.Sprintf("s.%s", name)
		e.Printf("\t// %s\n", name)
		t := s.types[i]
		e.WriteField(selector, t)
	}
	e.Printf("\treturn w.Write(buf)\n")
	e.Printf("}\n\n")
	g.Printf(e.SizeExpr())
	g.Printf("\tbuf := make([]byte, size)\n")
	e.WriteTo(&g.buf)
}

// TODO:
/*
func (g *Generator) generateRead(s *Struct) {
	g.Printf("func (s *%s) Read(r io.Reader) error {\n", s.name)
	for _, name := range s.fields {
		g.Printf("\tbinary.Read(r, binary.LittleEndian, s.%s)\n", name)
	}
	g.Printf("\treturn nil\n")
	g.Printf("}\n\n")
}
*/

func (f *File) inspectNode(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		return true
	}
	for _, spec := range decl.Specs {
		tspec, ok := spec.(*ast.TypeSpec)
		if !ok {
			log.Printf("not type spec")
			break
		}
		if tspec.Type == nil {
			continue
		}
		st, ok := tspec.Type.(*ast.StructType)
		if !ok || st.Fields == nil || st.Fields.List == nil {
			log.Printf("not struct type or missing field list")
			continue
		}
		s := &Struct{name: tspec.Name.Name}
		for _, field := range st.Fields.List {
			if len(field.Names) != 1 {
				log.Printf("warning: ignoring field because len(field.Names) != 1: %s\n", field.Names)
				continue
			}
			s.fields = append(s.fields, field.Names[0].Name)
			s.types = append(s.types, f.pkg.typeInfo.TypeOf(field.Type))
		}
		f.structs = append(f.structs, s)
	}
	return false
}
