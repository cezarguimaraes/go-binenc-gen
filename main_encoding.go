// Code generated by "gobinenc "; DO NOT EDIT.

package main

import (
	"encoding/binary"
	"io"
)

func (s *Struct) Write(w io.Writer) (n int64, err error) {
	buf := make([]byte, 8+len(s.name)+len(v))
	offset := 0
	// name
	buf[offset] = byte(len(s.name))
	buf[offset+1] = byte(len(s.name) >> 8)
	offset += 2
	copy(buf[offset:], s.name)
	offset += len(s.name)
	// fields
	buf[offset] = byte(len(s.fields))
	buf[offset+1] = byte(len(s.fields) >> 8)
	offset += 2
	for _, v := range s.fields {
		buf[offset] = byte(len(v))
		buf[offset+1] = byte(len(v) >> 8)
		offset += 2
		copy(buf[offset:], v)
		offset += len(v)
	}
	// types
	buf[offset] = byte(len(s.types))
	buf[offset+1] = byte(len(s.types) >> 8)
	offset += 2
	for _, v := range s.types {
	}
	return w.Write(buf)
}

func (s *Struct) Read(r io.Reader) error {
	binary.Read(r, binary.LittleEndian, s.name)
	binary.Read(r, binary.LittleEndian, s.fields)
	binary.Read(r, binary.LittleEndian, s.types)
	return nil
}

func (s *File) Write(w io.Writer) (n int64, err error) {
	buf := make([]byte, 4+len(s.typeName))
	offset := 0
	// pkg
	// file
	// typeName
	buf[offset] = byte(len(s.typeName))
	buf[offset+1] = byte(len(s.typeName) >> 8)
	offset += 2
	copy(buf[offset:], s.typeName)
	offset += len(s.typeName)
	// structs
	buf[offset] = byte(len(s.structs))
	buf[offset+1] = byte(len(s.structs) >> 8)
	offset += 2
	for _, v := range s.structs {
	}
	return w.Write(buf)
}

func (s *File) Read(r io.Reader) error {
	binary.Read(r, binary.LittleEndian, s.pkg)
	binary.Read(r, binary.LittleEndian, s.file)
	binary.Read(r, binary.LittleEndian, s.typeName)
	binary.Read(r, binary.LittleEndian, s.structs)
	return nil
}

func (s *Package) Write(w io.Writer) (n int64, err error) {
	buf := make([]byte, 4+len(s.name))
	offset := 0
	// name
	buf[offset] = byte(len(s.name))
	buf[offset+1] = byte(len(s.name) >> 8)
	offset += 2
	copy(buf[offset:], s.name)
	offset += len(s.name)
	// typeInfo
	// files
	buf[offset] = byte(len(s.files))
	buf[offset+1] = byte(len(s.files) >> 8)
	offset += 2
	for _, v := range s.files {
	}
	return w.Write(buf)
}

func (s *Package) Read(r io.Reader) error {
	binary.Read(r, binary.LittleEndian, s.name)
	binary.Read(r, binary.LittleEndian, s.typeInfo)
	binary.Read(r, binary.LittleEndian, s.files)
	return nil
}

func (s *Generator) Write(w io.Writer) (n int64, err error) {
	buf := make([]byte, 0)
	offset := 0
	// buf
	// pkg
	return w.Write(buf)
}

func (s *Generator) Read(r io.Reader) error {
	binary.Read(r, binary.LittleEndian, s.buf)
	binary.Read(r, binary.LittleEndian, s.pkg)
	return nil
}
